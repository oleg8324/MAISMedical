Imports ODMRDDHelperClassLibrary
Imports ODMRDDHelperClassLibrary.Utility
Imports MAIS.Business.Model
Imports MAIS.Data
Imports MAIS.Data.Objects
Imports MAIS.Business.Services
Imports System.String
Imports System.IO
Imports MAIS.Business.Helpers
Public Class DocumentUpload
    Inherits System.Web.UI.Page
    Private Const ImageMarkupFormat As String = "{0}&nbsp;<img src=""Images/icon_tooltip.gif"" title=""header=[{0}]  body=[{1}]"" />&nbsp;"
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load

        Dim uploadedFiles As New List(Of Business.Model.DocumentUpload)
        Dim uploadSvc As IUploadService = StructureMap.ObjectFactory.GetInstance(Of IUploadService)()


        If Not IsPostBack Then
            uploadedFiles = uploadSvc.GetUploadedDocuments(SessionHelper.ApplicationID)
            gvFiles.DataSource = uploadedFiles
            gvFiles.DataBind()
            disableRB()

        End If
        'Dim reqCheckbox As New ListItem
        'reqCheckbox.Text = String.Format(ImageMarkupFormat, "Applications")
        'reqCheckbox.Value = 1
        'cblUploadRequirements.Items.Add(reqCheckbox)
        'Dim reqCheckbox1 As New ListItem
        'reqCheckbox1.Text = String.Format(ImageMarkupFormat, "Notation supporting documents")
        'reqCheckbox1.Value = 2
        'cblUploadRequirements.Items.Add(reqCheckbox1)
        'Dim reqCheckbox2 As New ListItem
        'reqCheckbox2.Text = String.Format(ImageMarkupFormat, "Syllabus")
        'reqCheckbox2.Value = 1
        'cblUploadRequirements.Items.Add(reqCheckbox2)
        'Dim reqCheckbox3 As New ListItem
        'reqCheckbox3.Text = String.Format(ImageMarkupFormat, "Security Affidavit")
        'reqCheckbox3.Value = 1
        'cblUploadRequirements.Items.Add(reqCheckbox3)
    End Sub
    Protected Sub gvFiles_SelectedIndexChanging(ByVal sender As Object, ByVal e As GridViewSelectEventArgs) Handles gvFiles.SelectedIndexChanging
        'Transmit copy of selected file to user for preview
        Dim uploadService As IUploadService = StructureMap.ObjectFactory.GetInstance(Of IUploadService)()
        Dim byteArrayForFileToView As Byte() = uploadService.GetUploadedDocumentByImageSID(gvFiles.DataKeys(e.NewSelectedIndex).Values(0))

        'Clear all content output from buffer stream
        Response.Clear()

        Dim filenameCell As Integer = 2

        If gvFiles.AutoGenerateDeleteButton = False Then
            filenameCell = 1
        End If

        'Add HTTP header to output stream to specify a default filename, and file length
        Response.AddHeader("Content-Disposition", "attachment; filename=" & _
            gvFiles.Rows(e.NewSelectedIndex).Cells.Item(filenameCell).Text.ToString)

        Response.AddHeader("Content-Length", byteArrayForFileToView.Length.ToString())

        'Set the HTTP MIME type for output stream
        Response.ContentType = "application/octet-stream"

        'Output the data to the client
        If byteArrayForFileToView.Length > 0 Then
            Dim ext = System.IO.Path.GetExtension(gvFiles.Rows(e.NewSelectedIndex).Cells(filenameCell).Text.ToString)

            'If ext = ".html" Then
            '    Response.Redirect(PagesHelper.AttestationPrintPage)
            'Else
            Response.BinaryWrite(byteArrayForFileToView)
            'End If

            Response.End()
        End If
    End Sub
    Public Sub btnSaveContinue_Click(sender As Object, e As EventArgs) Handles btnSaveContinue.ServerClick
        Dim ret As ReturnObject(Of Boolean)
        ret = Business.Rules.DocumentUploadRules.CheckReqDocs(SessionHelper.ApplicationID)
        If ret.ReturnValue Then
            Response.Redirect(PagesHelper.GetNextPage(Master.CurrentPage))
        Else
            pError.Visible = True
            For Each s As ODMRDDHelperClassLibrary.Utility.ReturnMessage In ret.Errors
                pError.InnerHtml += s.Message & "</br>"
            Next
        End If
    End Sub
    Protected Sub btnPrevious_Click(sender As Object, e As EventArgs) Handles btnPrevious.ServerClick
        Response.Redirect(PagesHelper.GetPreviousPage(Master.CurrentPage))
    End Sub
    Public Sub Upload_Click() Handles btnUpload.ServerClick
        pError.Visible = False
        Try
            Dim strValid As Boolean = True
            'Dim rulesUpload As New Rules.RequiredDocumentRules
            'Dim strErrors As List(Of String) = rulesUpload.ValidatePage(cblUploadRequirements.SelectedIndex, uplCWUploadFile.HasFile,
            '                                                            uplCWUploadFile.PostedFile.ContentLength)
            If Not UploadHelper.IsAcceptableFileType(uplFile.FileName) Then
                strValid = False
                'File is of an unacceptable filetype
                'valsum1.lblErrorLabel.Text += "Please select a file that is in one of the following formats: "
                'Display list of acceptable extensions
                'For Each extension As String In UploadHelper.AcceptableExtensions
                '    lblErrorLabel.Text += extension & " "
                'Next
            End If

            If strValid = True Then
                'File is acceptable for upload
                Dim bytesForFileToSaveToDatabase(uplFile.PostedFile.InputStream.Length - 1) As Byte

                uplFile.PostedFile.InputStream.Read(bytesForFileToSaveToDatabase, 0, bytesForFileToSaveToDatabase.Length)

                If bytesForFileToSaveToDatabase.Length > 0 Then
                    Dim uploadService As IUploadService = StructureMap.ObjectFactory.GetInstance(Of IUploadService)()
                    Dim uploadDocumentNumber As Long = uploadService.InsertUploadedDocumentIntoImageStore(bytesForFileToSaveToDatabase)
                    Dim query1 As Data.Queries.UploadQueries = StructureMap.ObjectFactory.GetInstance(Of Data.Queries.UploadQueries)()
                    Dim stypes As New List(Of String)
                    stypes.Add("Application")
                    stypes.Add("Security Disclosure Form")
                    stypes.Add("Other")
                    Dim ltypes As List(Of Integer) = query1.GetDocumentTypeSids(stypes)
                    'Dim currentListItem As New ListItem
                    For i As Integer = 0 To rdbDocTypes.Items.Count - 1
                        rdbDocTypes.Items(i).Value = ltypes(i)
                    Next
                    If uploadDocumentNumber > 0 Then
                        Dim uploadedDoc As New Business.Model.DocumentUpload()

                        Dim s As String = rdbDocTypes.SelectedItem.Text
                        'Generate model for database information
                        With uploadedDoc
                            .ImageSID = uploadDocumentNumber
                            .DocumentName = uplFile.FileName
                            .DocumentType = rdbDocTypes.SelectedValue
                        End With
                        ' Save file info to database
                        uploadService.InsertUploadedDocument(uploadedDoc, SessionHelper.ApplicationID) 'sessionhelper.applicationId should be used

                    End If

                    'lblErrorLabel.Text = uplCWUploadFile.PostedFile.FileName & " has been uploaded"
                    'lblErrorLabel.ForeColor = Drawing.Color.Black
                    Dim uploadedFiles As New List(Of Business.Model.DocumentUpload)
                    Dim uploadSvc As IUploadService = StructureMap.ObjectFactory.GetInstance(Of IUploadService)()

                    uploadedFiles = uploadSvc.GetUploadedDocuments(SessionHelper.ApplicationID) 'SessionHelper.ApplicationID
                    gvFiles.DataSource = uploadedFiles
                    gvFiles.DataBind()
                    disableRB()
                End If
            End If
        Catch ex As Exception
            'lblErrorLabel.Text = "Error Uploading File"
            'lblErrorLabel.ForeColor = Drawing.Color.Red
        End Try
    End Sub
    Public Sub disableRB()
        Dim uploadS As IUploadService = StructureMap.ObjectFactory.GetInstance(Of IUploadService)()
        Dim res As Integer = uploadS.GetDocumentUploadForpageComplete(SessionHelper.ApplicationID)
        For Each i As ListItem In rdbDocTypes.Items
            i.Enabled = True
        Next
        If res > 0 Then
            rdbDocTypes.Items(0).Enabled = False
            rdbDocTypes.SelectedIndex = -1
        Else
            rdbDocTypes.Items(0).Selected = True
        End If
        'If res = 1 Or res = 2 Or res = -1 Then
        '    rdbDocTypes.Items(1).Enabled = False
        '    If res = 1 Then
        '        rdbDocTypes.Items(0).Enabled = False
        '    End If
        'ElseIf res = -2 Then
        '    rdbDocTypes.Items(0).Enabled = False
    End Sub
    Protected Sub gvFiles_RowDeleting(ByVal sender As Object, ByVal e As GridViewDeleteEventArgs) Handles gvFiles.RowDeleting
        'If Master.CertificationApplication.NumaraFootPrintsID > 0 Then
        '    lblErrorLabel.Text = "Files cannot be deleted once the application is submitted."
        '    lblErrorLabel.ForeColor = Drawing.Color.Red
        'Else
        Dim idToDel As Integer = e.Keys.Values(0) '  gvFiles.DataKeys(e.Keys.NewSelectedIndex).Values(0)
        'Dim filenameToDelete As String = gridViewUploadedFiles.Rows(e.RowIndex).Cells.Item(2).Text
        Dim uploadService As IUploadService = StructureMap.ObjectFactory.GetInstance(Of IUploadService)()

        'Delete database entry for file
        uploadService.DeleteDocumentByStoreSid(idToDel)

        Dim uploadedFiles As New List(Of Business.Model.DocumentUpload)

        uploadedFiles = uploadService.GetUploadedDocuments(SessionHelper.ApplicationID)
        gvFiles.DataSource = uploadedFiles
        gvFiles.DataBind()
        disableRB()
        'Me.Master.CheckForErrorMessages(uploadService.Messages)

        'lblErrorLabel.Text = filenameToDelete & " has been deleted"
        'lblErrorLabel.ForeColor = Drawing.Color.Black
        'End If
    End Sub
End Class